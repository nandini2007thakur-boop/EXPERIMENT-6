#include <stdio.h>
#include <string.h>

intstringLength(char str[]) {
intlen = 0;
while (str[len] != '\0')
len++;
returnlen;
}

intstringCompare(char str1[], char str2[], intpos) {
inti = 0;
while (str2[i] != '\0') {
if (pos + i>= stringLength(str1) || str1[pos + i] != str2[i])
return 0; 
i++;
    }
return 1; 
}

voidstringReplace(char str[], char pat[], char rep[]) {
char result[200]; 
inti = 0, j = 0, k, found, replaced = 0;
intlenStr = stringLength(str);
intlenPat = stringLength(pat);
intlenRep = stringLength(rep);

while (i<lenStr) {
found = stringCompare(str, pat, i);
if (found) {
replaced = 1;
for (k = 0; k <lenRep; k++)
result[j++] = rep[k];
i += lenPat;
        } else {
result[j++] = str[i++];
        }
    }

result[j] = '\0';

if (replaced)
printf("\nModified String: %s\n", result);
else
printf("\nPattern not found in string.\n");
}

int main() {
charstr[100], pat[50], rep[50];

printf("Enter the main string: ");
fgets(str, sizeof(str), stdin);
str[strcspn(str, "\n")] = '\0'; 

printf("Enter the pattern string: ");
fgets(pat, sizeof(pat), stdin);
pat[strcspn(pat, "\n")] = '\0'; 

printf("Enter the replacement string: ");
fgets(rep, sizeof(rep), stdin);
rep[strcspn(rep, "\n")] = '\0';

if (stringLength(pat) == 0) {
printf("Pattern string cannot be empty.\n");
return 0;
    }

stringReplace(str, pat, rep);

return 0;
}
